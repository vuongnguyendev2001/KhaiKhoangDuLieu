# -*- coding: utf-8 -*-
"""Bike_Sharing_Regression_Model.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1x8N3IofcAu6n58aqPIem6iNslQapI3es
"""

from google.colab import drive
drive.mount('/content/drive')

# Import thư viện
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score
from sklearn import metrics

# Đọc dữ liệu từ file csv
data = pd.read_csv('/content/drive/MyDrive/B1913331/KhaiKhoangDuLieu/DoAn/day.csv')

# In 5 dòng dữ liệu đầu tiên
print(data)
# Kiểm tra thông tin dữ liệu
print(data.info())
# Kiểm tra giá trị null
print(data.isnull().sum())

# season: biểu đồ cột
sns.countplot(x='season', data=data)
plt.show()

# mnth: biểu đồ cột
sns.countplot(x='mnth', data=data)
plt.show()

# weekday: biểu đồ cột
sns.countplot(x='weekday', data=data)
plt.show()

# workingday: biểu đồ cột
sns.countplot(x='workingday', data=data)
plt.show()

# weathersit: biểu đồ cột
sns.countplot(x='weathersit', data=data)
plt.show()

# temp: biểu đồ histogram
sns.histplot(x='temp', data=data, kde=True)
plt.show()

# atemp: biểu đồ histogram
sns.histplot(x='atemp', data=data, kde=True)
plt.show()

# hum: biểu đồ histogram
sns.histplot(x='hum', data=data, kde=True)
plt.show()

# windspeed: biểu đồ histogram
sns.histplot(x='windspeed', data=data, kde=True)
plt.show()

# casual: biểu đồ histogram
sns.histplot(x='casual', data=data, kde=True)
plt.show()

# registered: biểu đồ histogram
sns.histplot(x='registered', data=data, kde=True)
plt.show()

# Biểu đồ hộp cho cột 'season'
sns.boxplot(x='season', y='cnt', data=data)
plt.show()

# Biểu đồ hộp cho cột 'mnth'
sns.boxplot(x='mnth', y='cnt', data=data)
plt.show()

# Biểu đồ cột cho cột 'weekday'
sns.barplot(x='weekday', y='cnt', data=data)
plt.show()

# Biểu đồ cột cho cột 'workingday'
sns.barplot(x='workingday', y='cnt', data=data)
plt.show()

# Biểu đồ cột cho cột 'weathersit'
sns.barplot(x='weathersit', y='cnt', data=data)
plt.show()

# Biểu đồ đường cho cột 'temp'
sns.lmplot(x='temp', y='cnt', data=data)
plt.show()

# Biểu đồ đường cho cột 'atemp'
sns.lmplot(x='atemp', y='cnt', data=data)
plt.show()

# Biểu đồ đường cho cột 'hum'
sns.lmplot(x='hum', y='cnt', data=data)
plt.show()

# Biểu đồ đường cho cột 'windspeed'
# sns.lineplot(x='windspeed', y='cnt', data=data)
sns.lmplot(x='windspeed', y='cnt', data=data)
plt.show()

# Biểu đồ phân tán cho cột 'casual'
sns.lmplot(x='casual', y='cnt', data=data)
plt.show()

# Biểu đồ phân tán cho cột 'registered'
sns.lmplot(x='registered', y='cnt', data=data)
plt.show()

# Loại bỏ các cột không cần thiết
data.drop(['instant', 'dteday'], axis=1, inplace=True)

from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
# Chuẩn hóa dữ liệu
scaler = StandardScaler()
num_features = ['casual', 'registered']
data[num_features] = scaler.fit_transform(data[num_features])

print(data[num_features])

X = data[['season', 'yr', 'mnth', 'holiday', 'weekday', 'workingday',
          'weathersit', 'temp', 'atemp', 'hum', 'windspeed', 'casual', 'registered']]
y = data['cnt']

# Chia dữ liệu thành tập huấn luyện và tập kiểm tra
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

from sklearn.linear_model import LinearRegression
# Xây dựng mô hình hồi quy tuyến tính
lr_model = LinearRegression()
lr_model.fit(X_train, y_train)

# Dự đoán giá trị trên tập test
y_pred_lr = lr_model.predict(X_test)
print("RMSE LinearRegression: ",mean_squared_error(y_test,y_pred_lr,squared=False))
print("MAE LinearRegression: ",mean_absolute_error(y_pred_lr,y_test))
lr = round(r2_score(y_pred_lr,y_test)*100,2)
print("R Score LinearRegression:",lr,"%")

from sklearn.tree import DecisionTreeRegressor
# Xây dựng mô hình hồi quy tuyến tính
decision_tree_reg = DecisionTreeRegressor(max_depth=10,random_state=15)
decision_tree_reg.fit(X_train, y_train)

# Dự đoán giá trị trên tập test
y_pred_tree = decision_tree_reg.predict(X_test)
print("RMSE DecisionTreeRegressor: ",mean_squared_error(y_pred_tree,y_test,squared=False))
print("MAE DecisionTreeRegressor: ",mean_absolute_error(y_pred_tree,y_test))
dtr = round(r2_score(y_pred_tree,y_test)*100,2)
print("R Score DecisionTreeRegressor:",dtr,"%")

from sklearn.ensemble import RandomForestRegressor
# Xây dựng mô hình hồi quy tuyến tính
random_forest_reg = RandomForestRegressor(n_estimators=500, max_depth=10)
random_forest_reg.fit(X_train, y_train)

# Dự đoán giá trị trên tập test
y_pred_rdf = random_forest_reg.predict(X_test)
print("RMSE RandomForestRegressor: ",mean_squared_error(y_test,y_pred_rdf,squared=False))
print("MAE RandomForestRegressor: ",mean_absolute_error(y_test,y_pred_rdf))
rfr = round(r2_score(y_pred_rdf,y_test)*100,2)
print("R Score RandomForestRegressor:",rfr,"%")

combined = pd.DataFrame(np.core.records.fromarrays([np.array(y_test), np.array(y_pred_lr)],names='cnt,y_pred_lr'))
print(combined)

sns.lineplot(data=combined)
plt.show()